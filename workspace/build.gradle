buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

repositories {
    maven { url 'https://www.dogforce-games.com/maven/' }
    maven { // Patchouli
        url "https://maven.blamejared.com"
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment' , version: "$parchment_version"
//    accessTransformer = file('workspace/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
//            properties 'mixin.env.disableRefMap': 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:HotswapAgent=fatjar'

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            mods {
                SophisticatedCore {
                    source project(':SophisticatedCore').sourceSets.main
                }
                SophisticatedBackpacks {
                    source project(':SophisticatedBackpacks').sourceSets.main
                }
                SophisticatedStorage {
                    source project(':SophisticatedStorage').sourceSets.main
                }
            }
        }

        client2 {
            workingDirectory project.file('run2')
//            properties 'mixin.env.disableRefMap': 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:HotswapAgent=fatjar'
            args 'username', 'Dev2'

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            mods {
                SophisticatedCore {
                    source project(':SophisticatedCore').sourceSets.main
                }
                SophisticatedBackpacks {
                    source project(':SophisticatedBackpacks').sourceSets.main
                }
                SophisticatedStorage {
                    source project(':SophisticatedStorage').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
//            properties 'mixin.env.disableRefMap': 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:HotswapAgent=fatjar'

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            mods {
                SophisticatedCore {
                    source project(':SophisticatedCore').sourceSets.main
                }
                SophisticatedBackpacks {
                    source project(':SophisticatedBackpacks').sourceSets.main
                }
                SophisticatedStorage {
                    source project(':SophisticatedStorage').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
//            properties 'mixin.env.disableRefMap': 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'
            mods {
                SophisticatedCore {
                    source project(':SophisticatedCore').sourceSets.main
                }
                SophisticatedBackpacks {
                    source project(':SophisticatedBackpacks').sourceSets.main
                }
                SophisticatedStorage {
                    source project(':SophisticatedStorage').sourceSets.main
                }
            }
        }
    }
}

jar {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (findProject(':TheOneProbe') != null) {
        implementation project(':TheOneProbe')
    } else {
        implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
            transitive = false
        })
    }

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    runtimeOnly fg.deobf("curse.maven:autoreglib-250363:3642382")
    runtimeOnly fg.deobf("curse.maven:quark-243121:3800462")
    runtimeOnly fg.deobf("curse.maven:mekanism-268560:3833669")
    runtimeOnly fg.deobf("curse.maven:refinedstorage-243076:3712882")
    runtimeOnly fg.deobf("curse.maven:simplestoragenetwork-268495:3868680")
    runtimeOnly fg.deobf("curse.maven:spark-361579:4505375")
    runtimeOnly fg.deobf("curse.maven:chipped-456956:4293291")
    runtimeOnly fg.deobf("curse.maven:ctm-267602:3933537")

    implementation project(':SophisticatedBackpacks')
    implementation project(':SophisticatedStorage')
    implementation project(':SophisticatedCore')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
