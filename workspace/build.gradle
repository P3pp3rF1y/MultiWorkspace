plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.101'
    id "org.sonarqube" version "5.0.0.4638"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    maven { url "https://maven.theillusivec4.top/" }
    maven { url 'https://www.dogforce-games.com/maven/' }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // Patchouli
        url "https://maven.blamejared.com"
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesName = 'modid'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'mixin.env.disableRefMap', 'true'

        modSource project(':SophisticatedCore').sourceSets.main
        modSource project(':SophisticatedBackpacks').sourceSets.main
        modSource project(':SophisticatedStorage').sourceSets.main
    }

    client {
    }

    client2 {
        configure ("client")

        programArguments.addAll '--username', 'Dev2'
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--all', '--output', file('src/generated/resources/').absolutePath, '--existing', sourceSets.main.resources.srcDirs[0].absolutePath
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

/*
    if (findProject(':TheOneProbe') != null) {
        implementation project(':TheOneProbe')
    } else {
        implementation project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
            transitive = false
        })
    }
*/

//    compileOnly "mezz.jei:jei-${jei_mc_version}-api:${jei_version}")
//    runtimeOnly "mezz.jei:jei-${jei_mc_version}:${jei_version}")

    implementation project(':SophisticatedCore')
    implementation project(':SophisticatedBackpacks')
    implementation project(':SophisticatedStorage')

    runtimeOnly "curse.maven:jade-324717:5109393"
    runtimeOnly "curse.maven:embeddium-908741:5213210"
    //runtimeOnly "curse.maven:itemborders-513769:${item_borders_cf_file_id}"
    //runtimeOnly "curse.maven:iceberg-520110:${iceberg_cf_file_id}"
    //runtimeOnly "curse.maven:prism-638111:${prism_cf_file_id}"
    runtimeOnly "curse.maven:chipped-456956:5081543"
    runtimeOnly "curse.maven:resourcefullib-570073:5180841"
    runtimeOnly "curse.maven:athena-841890:5176890"
    //runtimeOnly "curse.maven:create-328085:4835191"

    //runtimeOnly "curse.maven:cyclopscore-232758:4905983"
    //runtimeOnly "curse.maven:integratedterminals-295910:4925609"
    //runtimeOnly "curse.maven:integratedynamics-236307:4925678"
    //runtimeOnly "curse.maven:commoncapabilities-247007:4620480"
    //runtimeOnly "curse.maven:integratedtunnels-251389:4782861"
    runtimeOnly "curse.maven:mekanism-268560:5239585"

/*
    runtimeOnly "curse.maven:refinedstorage-243076:4465872")
    runtimeOnly "curse.maven:placebo-283644:4629583")
    runtimeOnly "curse.maven:fastworkbench-288885:4579504")
    runtimeOnly "curse.maven:spark-361579:4029757")
    runtimeOnly "dev.emi:emi-forge:1.0.19+1.19.2")
*/
}